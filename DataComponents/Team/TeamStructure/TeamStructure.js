/*team structures: SINGLE_LANE, TRIPLE_LANE, DOUBLING, TRIPLING, QUADRUPLING,
 CIVILIAN_TS, ZOMBIE_TS, (some kind of worker structure)*/
/*team structures: quadrupling and triple lane have 2 titans
-- Single Lane is one base, one bonus, four towers(two and two), one titan, two 
guardians, two hunters, five lts, ten soldiers (ten more are generated by base 
every 90 seconds).
-- Triple Lane is one base, three bonuses, six towers, one titan, three 
guardians, three hunters, ten lts, thirty soldiers (thirty more are generated by
base every 90 seconds).
-- Doubling has one titan, two guardians, two hunters, four lts, eight soldiers.
-- Tripling has one titan, three guardians, three hunters, nine lts, 
twenty-seven soldiers
-- Quadrupling has one titan, four guardians, four hunters, sixteen lts, and 
sixty-four soldiers.
-- Civilian and zombie structures make the team consist of a set of civilians or
zombies, numbering 25 total.  
*/
public class TeamStructure{
    //[0]=base, [1]=tower, [2]=bonus, [3]=civilian, [4]=zombie, [5]=titan,
    //[6]=guardian,[7]=hunter, [8]=lts, [9]=soldier, [10]=worker
    protected var cntList: int[];
    protected var size: int;
    private var nameGame:RandomNameGenerator;//not sure if this should be here

    public function TeamStructure(cnt:int[], sze:int){
        if(cnt.length != 11){
            Debug.Log("Structure must be size 11");
        }
        else{
            cntList=cnt;//must be size 11
            size=sze;
            nameGame= new RandomNameGenerator();
        }
    }

    //---- May Not Be Still Needed ---
    //returns a deep copy of the arr (unit type count) for the structure
    public function getArrCopy(){
        var arr:int[]=new int[11];
        for(var i=0;i<11;i++){
            arr[i]=cntList[i];
        }
        return arr;
    }
    
    //abstract class
    public function getTS(){}

	//abstract in parent class, all subclasses should override
    //Used to populate the GBUnitCollection
    public function generate(units: GBUnitCollection){
    }

    protected function addId(){
        var cnt:int=1;
        var cur:GBUnitNode=units.getListHead();
    	while(cur!=null){
            GBUnitNode.getData().unitID=cnt;
            cnt++;
            cur=cur.next;
        }
    }

    /*abstract function to be implemented by children*/
    protected function loadUnits(gp:GBGroup){
       //there are war style units, mission style and civ zombie
    }
    
    protected function generateUnits(units: GBUnitCollection){
        var idCnt:int=0;
        //iterates through unit type counts
        var types= new UnitType[11];
        //unit types need to be made
        types[0]= UnitTypeBase.getBa();
        types[1]= UnitTypeTower.getTo();
        types[2]= UnitTypeBonus.getBo();
        types[3]= UnitTypeSoldier.getSo();
        types[4]= UnitTypeLt.getLt();
        types[5]= UnitTypeHt.getHt();
        types[6]= UnitTypeGuardian.getGu();
        types[7]= UnitTypeTitan.getTi();
        types[8]= UnitTypeCivilian.getCi();
        types[9]= UnitTypeZombie.getZo();
        //add structure value for this
        types[10]= UnitTypeWorker.getWo();
        for(var pos=0;pos<11;pos++){
            var spotCnt=cntList[pos]
            for(var uCnt=0;uCnt<spotCnt;uCnt++){
                var tempUnit:GBUnit=new GBUnit();
                tempUnit.unitType=types[pos];
                if(pos>2){
                    tempUnit.unitName= nameGame.createNewName();
                }
                else{
                    tempUnit.unitName=groupName+" Structure "+idCnt;
                }
                tempUnit.unitID=idCnt;
                //future plans may set archetype to something here.
                units.addUnit(tempUnit);
                idCnt++;
            }
            
        }
    }
}