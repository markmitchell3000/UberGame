/*team structures: SINGLE_LANE, TRIPLE_LANE, DOUBLING, TRIPLING, QUADRUPLING,
 CIVILIAN_TS, ZOMBIE_TS, (some kind of worker structure)*/
/*team structures: quadrupling and triple lane have 2 titans
-- Single Lane is one base, one bonus, four towers(two and two), one titan, two 
guardians, two hunters, five lts, ten soldiers (ten more are generated by base 
every 90 seconds).
-- Triple Lane is one base, three bonuses, six towers, one titan, three 
guardians, three hunters, ten lts, thirty soldiers (thirty more are generated by
base every 90 seconds).
-- Doubling has one titan, two guardians, two hunters, four lts, eight soldiers.
-- Tripling has one titan, three guardians, three hunters, nine lts, 
twenty-seven soldiers
-- Quadrupling has one titan, four guardians, four hunters, sixteen lts, and 
sixty-four soldiers.
-- Civilian and zombie structures make the team consist of a set of civilians or
zombies, numbering 25 total.  
*/
public class TeamStructure{
    //[0]=base, [1]=tower, [2]=bonus, [3]=civilian, [4]=zombie, [5]=titan,
    //[6]=guardian,[7]=hunter, [8]=lts, [9]=soldier, [10]=worker
    protected var cntList: int[];
    protected var size: int;
    protected var tsType: String;
    protected var isWar: boolean;
    private var nameGame:RandomNameGenerator;//not sure if this should be here

    public function TeamStructure(cnt:int[], sze:int, mt:String, iw:boolean){
        if(cnt.length != 11){
            Debug.Log("Structure must be size 11");
        }
        else{
            cntList=cnt;//must be size 11
            size=sze;
            nameGame= new RandomNameGenerator();
            tsType=mt;
            isWar=iw;
        }
    }

    public function getIsWar(){
        return isWar;
    }

    //---- May Not Be Still Needed ---
    //returns a deep copy of the arr (unit type count) for the structure
    public function getArrCopy(){
        var arr:int[]=new int[11];
        for(var i=0;i<11;i++){
            arr[i]=cntList[i];
        }
        return arr;
    }
    
    public function getTSType(){
        return tsType;
    } 
    //abstract class for getting static object for any child of team structure
    public static function getTS(){}

    //abstract class
    public function getUnitPlacement(quadrant: int){}
    
}
