/*enum TEAM_STRUCTURE{SINGLE_LANE, TRIPLE_LANE, DOUBLING, TRIPLING, QUADRUPLING,
 CIVILIAN_TS, ZOMBIE_TS};*/
/*team structures: (all teams have a one in twenty chance of having a second 
titan, this is tracked with a flag.)
-- Single Lane is one base, one bonus, four towers(two and two), one titan, two 
guardians, two hunters, five lts, ten soldiers (ten more are generated by base 
every 90 seconds).
-- Triple Lane is one base, three bonuses, six towers, one titan, three 
guardians, three hunters, ten lts, thirty soldiers (thirty more are generated by
base every 90 seconds).
-- Doubling has one titan, two guardians, two hunters, four lts, eight soldiers.
-- Tripling has one titan, three guardians, three hunters, nine lts, 
twenty-seven soldiers
-- Quadrupling has one titan, four guardians, four hunters, sixteen lts, and 
sixty-four soldiers.
-- Civilian and zombie structures make the team consist of a set of civilians or
zombies, numbering 25 total.  
*/
public class TeamStructure{
    private bonusTitan:boolean;//maybe this is an argument that is passed
    public function TeamStructure(){
        var nameGame= new RandomNameGenerator();
    }

	//abstract in parent class, all subclasses should override
    public function generate(units: GBUnitCollection){
    }

    protected function addId(){
        var cnt:int=1;
        var cur:GBUnitNode=units.getListHead();
    	while(cur!=null){
            GBUnitNode.getData().unitID=cnt;
            cnt++;
            cur=cur.next;
        }
    }

    //abstract function to be implemented by children
    protected function loadUnits(gp:GBGroup){
           /* case TEAM_STRUCTURE.SINGLE_LANE:
            case TEAM_STRUCTURE.TRIPLE_LANE:
                loadWarStyleUnits(gp);
                break;
            case TEAM_STRUCTURE.DOUBLING:
            case TEAM_STRUCTURE.TRIPLING:
            case TEAM_STRUCTURE.QUADRUPLING:
                loadMissionStyleUnits(gp);
                break;
            case TEAM_STRUCTURE.CIVILIAN_TS:
            case TEAM_STRUCTURE.ZOMBIE_TS:
                loadCivZomStyleUnits(gp);*/
    }
    
    protected function generateUnits(cntList:int[], units: GBUnitCollection){
        var idCnt:int=0;
        //iterates through unit type counts
        var types= new UnitType[11];
        //unit types need to be made
        types[0]= UnitTypeBase.getBa();
        types[1]= UnitTypeTower.getTo();
        types[2]= UnitTypeBonus.getBo();
        types[3]= UnitTypeSoldier.getSo();
        types[4]= UnitTypeLt.getLt();
        types[5]= UnitTypeHt.getHt();
        types[6]= UnitTypeGuardian.getGu();
        types[7]= UnitTypeTitan.getTi();
        types[8]= UnitTypeCivilian.getCi();
        types[9]= UnitTypeZombie.getZo();
        //add structure value for this
        types[10]= UnitTypeWorker.getWo();
        for(var pos=0;pos<10;pos++){
            var spotCnt=cntList[pos]
            if((pos==7)&&(bonusTitan)){ spotCnt++;}
            for(var uCnt=0;uCnt<spotCnt;uCnt++){
                var tempUnit:GBUnit=new GBUnit();
                tempUnit.unitType=types[pos];
                if(pos>2){
                    tempUnit.unitName= nameGame.createNewName();
                }
                else{
                    tempUnit.unitName=groupName+" Structure "+idCnt;
                }
                tempUnit.unitID=idCnt;
                //future plans may set archetype to something here.
                units.addUnit(tempUnit);
                idCnt++;
            }
            
        }
    }
}